name: Build and Deploy (ECS)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/dev-mirzabicer/yingyu

jobs:
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # Optional: run lint/typecheck/unit tests here

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        id: meta
        run: |
          SHA_TAG=sha-${GITHUB_SHA::12}
          echo "image_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "Using tag: $SHA_TAG"

      - name: Build & Push (with registry cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.image_tag }}
          build-args: |
            NPM_REGISTRY=https://registry.npmmirror.com
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          key: ${{ secrets.ECS_SSH_KEY }}
          envs: IMAGE_TAG
          script_stop: true
          script: |
            set -euo pipefail
            IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
            echo "Deploying image tag: ${IMAGE_TAG}"

            cd /srv/yingyu

            # Ensure repo exists on server
            if [ ! -d .git ]; then
              git clone https://github.com/dev-mirzabicer/yingyu.git .
            fi

            # Update code (for compose/scripts changes)
            git fetch --all
            git reset --hard origin/main

            # Ensure env file exists
            if [ ! -f .env.production ]; then
              echo "Missing /srv/yingyu/.env.production"; exit 1
            fi

            # --- transactional deploy with rollback ---
            mkdir -p .deploy
            PREV_TAG_FILE=.deploy/last_successful_tag
            [ -f "$PREV_TAG_FILE" ] && PREV_TAG=$(cat "$PREV_TAG_FILE") || PREV_TAG=""

            # Update IMAGE_TAG in runtime (compose substitutes it)
            if grep -q '^IMAGE_TAG=' .env.production; then
              sed -i "s|^IMAGE_TAG=.*$|IMAGE_TAG=\"${IMAGE_TAG}\"|" .env.production
            else
              echo "IMAGE_TAG=\"${IMAGE_TAG}\"" >> .env.production
            fi

            # Pull & start
            docker pull ghcr.io/dev-mirzabicer/yingyu:${IMAGE_TAG} || true
            docker compose --env-file .env.production -f docker-compose.prod.yml up -d

            # Run Prisma migrations BEFORE marking success
            APP_CID=$(docker compose -f docker-compose.prod.yml ps -q app)
            if [ -n "$APP_CID" ]; then
              docker exec -e DATABASE_URL="$(grep -E '^DATABASE_URL' .env.production | cut -d= -f2- || true)" -i "$APP_CID" \
                npx prisma migrate deploy || MIG_ERR=$?
            else
              echo "App container not found"; MIG_ERR=1
            fi

            # Health gate: wait up to 120s
            HEALTH_OK=0
            for i in $(seq 1 24); do
              if curl -fsS http://127.0.0.1/api/health >/dev/null; then
                HEALTH_OK=1; break
              fi
              sleep 5
            done

            if [ "${MIG_ERR:-0}" != "0" ] || [ "$HEALTH_OK" != "1" ]; then
              echo "❌ Deploy failed (migrate=$MIG_ERR, health=$HEALTH_OK). Rolling back..."
              if [ -n "$PREV_TAG" ]; then
                sed -i "s|^IMAGE_TAG=.*$|IMAGE_TAG=\"${PREV_TAG}\"|" .env.production
                docker pull ghcr.io/dev-mirzabicer/yingyu:${PREV_TAG} || true
                docker compose --env-file .env.production -f docker-compose.prod.yml up -d
                echo "Rolled back to ${PREV_TAG}"
              else
                echo "No previous tag to roll back to."
              fi
              exit 1
            fi

            # Mark success for future rollbacks
            echo "${IMAGE_TAG}" > "$PREV_TAG_FILE"
            echo "✅ Deployed ${IMAGE_TAG} successfully."

