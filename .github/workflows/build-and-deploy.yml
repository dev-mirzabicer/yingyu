name: Build and Deploy (ECS)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/dev-mirzabicer/yingyu

jobs:
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # Optional: run lint/typecheck/unit tests here

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        id: meta
        run: |
          SHA_TAG=sha-${GITHUB_SHA::12}
          echo "image_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "Using tag: $SHA_TAG"

      - name: Install Node (for lint/typecheck)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci --legacy-peer-deps

      - name: Lint (non-blocking for now)
        run: npm run lint || true

      - name: Typecheck (non-blocking for now)
        run: npx tsc -p tsconfig.json || true

      - name: Build & Push (with registry cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.image_tag }}
          build-args: |
            NPM_REGISTRY=https://registry.npmmirror.com
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  cleanup:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH cleanup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          key: ${{ secrets.ECS_SSH_KEY }}
          script_stop: true
          script: |
            set -Eeuo pipefail
            echo "🧹 Cleaning up Docker artifacts..."
            
            # Clean unused Docker images (keep current and previous)
            docker image prune -a -f --filter "until=168h" || true
            
            # Clean build cache
            docker builder prune -a -f || true
            
            # Clean system logs (keep last 7 days)
            sudo journalctl --vacuum-time=7d || true
            
            # Clean temp files
            sudo rm -rf /tmp/* || true
            
            echo "✅ Cleanup completed"

  deploy:
    needs: [build, cleanup]
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}   # <- from build job output
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          key: ${{ secrets.ECS_SSH_KEY }}
          script_stop: true
          envs: IMAGE_TAG                                  # <- export to remote shell
          script: |
            set -Eeuo pipefail
            trap 'echo "❌ Line $LINENO failed. Last cmd: $BASH_COMMAND"' ERR
            set -x

            echo "Deploying image tag: ${IMAGE_TAG}"

            cd /srv/yingyu
            if [ ! -d .git ]; then
              git clone https://github.com/dev-mirzabicer/yingyu.git .
            fi
            git fetch --all
            git reset --hard origin/main

            test -f .env.production || { echo "Missing /srv/yingyu/.env.production"; exit 1; }
            systemctl is-active docker || systemctl start docker

            # persist tag for compose
            if grep -q '^IMAGE_TAG=' .env.production; then
              sed -i "s|^IMAGE_TAG=.*$|IMAGE_TAG=\"${IMAGE_TAG}\"|" .env.production
            else
              echo "IMAGE_TAG=\"${IMAGE_TAG}\"" >> .env.production
            fi

            docker pull ghcr.io/dev-mirzabicer/yingyu:${IMAGE_TAG}
            docker compose --env-file .env.production -f docker-compose.prod.yml up -d

            APP_CID=$(docker compose -f docker-compose.prod.yml ps -q app)
            test -n "$APP_CID"
            docker exec -i "$APP_CID" node ./node_modules/.bin/prisma migrate deploy


            for i in $(seq 1 24); do
              if curl -fsS http://127.0.0.1/api/health >/dev/null; then
                echo "Health OK"; break
              fi
              sleep 5
              [ "$i" -eq 24 ] && { echo "Health check failed"; exit 1; }
            done

            mkdir -p .deploy
            echo "${IMAGE_TAG}" > .deploy/last_successful_tag
            echo "✅ Deployed ${IMAGE_TAG} successfully."

