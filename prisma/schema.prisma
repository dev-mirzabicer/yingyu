datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ================================================================= //
// ENUMS
// ================================================================= //

enum StudentStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum ProficiencyLevel {
  BEGINNER
  ELEMENTARY
  INTERMEDIATE
  ADVANCED
}

enum PaymentStatus {
  ACTIVE
  EXPIRED
  REFUNDED
}
enum ClassStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}
enum CardState {
  NEW
  LEARNING
  REVIEW
  RELEARNING
}
enum ReviewType {
  VOCABULARY
  LISTENING
  SPELLING
  GRAMMAR
}

enum UnitItemType {
  VOCABULARY_DECK
  GRAMMAR_EXERCISE
  LISTENING_EXERCISE
  FILL_IN_THE_BLANK_EXERCISE
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum JobType {
  INITIALIZE_CARD_STATES
  INITIALIZE_LISTENING_CARD_STATES
  GENERATE_PRACTICE_PDF
  OPTIMIZE_FSRS_PARAMS
  OPTIMIZE_LISTENING_FSRS_PARAMS
  REBUILD_FSRS_CACHE
  REBUILD_LISTENING_FSRS_CACHE
  BULK_IMPORT_VOCABULARY
  BULK_IMPORT_STUDENTS
  BULK_IMPORT_SCHEDULES
  BULK_IMPORT_FILL_IN_THE_BLANK
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
}

// ================================================================= //
// CORE MODELS
// ================================================================= //

model Teacher {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String
  name         String
  phone        String?
  timezone     String    @default("Asia/Shanghai")
  avatarUrl    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  validityUntil DateTime?
  lastLoginAt   DateTime?

  settings                       TeacherSettings?
  students                       Student[]
  sessions                       Session[]
  jobs                           Job[]
  createdDecks                   VocabularyDeck[]
  createdGrammar                 GrammarExercise[]
  createdListening               ListeningExercise[]
  createdFillInTheBlankDecks     FillInTheBlankDeck[] @relation("TeacherCreatedFillInTheBlankDecks")
  createdUnits                   Unit[]
  authSessions                   AuthSession[]
}

model TeacherSettings {
  id                      String @id @default(uuid()) @db.Uuid
  teacherId               String @unique @db.Uuid
  paymentAlertThreshold   Int    @default(3)
  preferredLessonDuration Int    @default(60)

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Student {
  id               String         @id @default(uuid()) @db.Uuid
  teacherId        String         @db.Uuid
  name             String
  email            String?
  phone            String?
  proficiencyLevel ProficiencyLevel @default(BEGINNER)
  notes            String?
  status           StudentStatus  @default(ACTIVE)
  isArchived       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  teacher                       Teacher                         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  payments                      Payment[]
  classSchedules                ClassSchedule[]
  studentDecks                  StudentDeck[]
  cardStates                    StudentCardState[]
  listeningCardStates           ListeningCardState[]
  reviewHistory                 ReviewHistory[]
  fsrsParams                    StudentFsrsParams[]
  listeningFsrsParams           ListeningFsrsParams[]
  sessions                      Session[]
  fillInTheBlankDoneRecords     StudentFillInTheBlankCardDone[]
}

// ================================================================= //
// CONTENT & SESSION MODELS (Refined Architecture)
// ================================================================= //

model Unit {
  id                       String     @id @default(uuid()) @db.Uuid
  creatorId                String?    @db.Uuid
  name                     String
  description              String?
  isPublic                 Boolean    @default(false)
  isArchived               Boolean    @default(false)
  estimatedMinimumDuration Int?
  estimatedMaximumDuration Int?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  creator  Teacher?   @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  items    UnitItem[]
  sessions Session[]
}

model UnitItem {
  id                         String       @id @default(uuid()) @db.Uuid
  unitId                     String       @db.Uuid
  order                      Int
  type                       UnitItemType
  exerciseConfig             Json?
  vocabularyDeckId           String?      @unique @db.Uuid
  grammarExerciseId          String?      @unique @db.Uuid
  listeningExerciseId        String?      @unique @db.Uuid
  fillInTheBlankDeckId       String?      @unique @db.Uuid

  unit                     Unit                      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  vocabularyDeck           VocabularyDeck?           @relation(fields: [vocabularyDeckId], references: [id], onDelete: SetNull)
  grammarExercise          GrammarExercise?          @relation(fields: [grammarExerciseId], references: [id], onDelete: SetNull)
  listeningExercise        ListeningExercise?        @relation(fields: [listeningExerciseId], references: [id], onDelete: SetNull)
  fillInTheBlankDeck       FillInTheBlankDeck?       @relation(fields: [fillInTheBlankDeckId], references: [id], onDelete: SetNull)

  activeSession Session?

  @@index([unitId])
}

model Session {
  id                String        @id @default(uuid()) @db.Uuid
  studentId         String        @db.Uuid
  teacherId         String        @db.Uuid
  unitId            String        @db.Uuid
  status            SessionStatus @default(IN_PROGRESS)
  currentUnitItemId String?       @unique @db.Uuid
  startTime         DateTime      @default(now())
  endTime           DateTime?
  progress          Json?

  student         Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher         Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  unit            Unit            @relation(fields: [unitId], references: [id], onDelete: Restrict)
  currentUnitItem UnitItem?       @relation(fields: [currentUnitItemId], references: [id], onDelete: SetNull)
  reviewHistory   ReviewHistory[]
}

// ================================================================= //
// ASYNCHRONOUS JOB SYSTEM
// ================================================================= //

model Job {
  id        String    @id @default(uuid()) @db.Uuid
  ownerId   String    @db.Uuid
  type      JobType
  status    JobStatus @default(PENDING)
  payload   Json
  result    Json?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  owner Teacher @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  @@index([status, type])
}

// ================================================================= //
// EXERCISE & FSRS MODELS (Structurally Unchanged)
// ================================================================= //

model VocabularyDeck {
  id               String   @id @default(uuid()) @db.Uuid
  creatorId        String?  @db.Uuid
  name             String
  description      String?
  isPublic         Boolean  @default(false)
  isArchived       Boolean  @default(false)
  originExerciseId String?  @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creator                  Teacher?             @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  cards                    VocabularyCard[]
  studentDecks             StudentDeck[]
  listeningExercises       ListeningExercise[]
  boundFillInTheBlankDecks FillInTheBlankDeck[] @relation("BoundFillInTheBlankDecks")
  unitItem                 UnitItem?
}

model VocabularyCard {
  id                 String   @id @default(uuid()) @db.Uuid
  deckId             String   @db.Uuid
  englishWord        String
  chineseTranslation String
  pinyin             String?
  ipaPronunciation   String?
  exampleSentences   Json?
  wordType           String?
  difficultyLevel    Int      @default(1)
  audioUrl           String?
  imageUrl           String?
  videoUrl           String?
  frequencyRank      Int?
  tags               String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  deck                     VocabularyDeck         @relation(fields: [deckId], references: [id], onDelete: Cascade)
  cardStates               StudentCardState[]
  listeningCardStates      ListeningCardState[]
  boundFillInTheBlankCards FillInTheBlankCard[]
}

model GrammarExercise {
  id               String   @id @default(uuid()) @db.Uuid
  creatorId        String?  @db.Uuid
  title            String
  grammarTopic     String
  difficultyLevel  Int      @default(1)
  exerciseData     Json
  explanation      String?
  tags             String[]
  isPublic         Boolean  @default(false)
  isArchived       Boolean  @default(false)
  originExerciseId String?  @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creator  Teacher?  @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  unitItem UnitItem?
}

model ListeningExercise {
  id               String   @id @default(uuid()) @db.Uuid
  creatorId        String?  @db.Uuid
  title            String
  vocabularyDeckId String   @db.Uuid
  difficultyLevel  Int      @default(1)
  explanation      String?
  tags             String[]
  isPublic         Boolean  @default(false)
  isArchived       Boolean  @default(false)
  originExerciseId String?  @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creator         Teacher?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  vocabularyDeck  VocabularyDeck  @relation(fields: [vocabularyDeckId], references: [id], onDelete: Restrict)
  unitItem        UnitItem?
}

model FillInTheBlankDeck {
  id                     String   @id @default(uuid()) @db.Uuid
  creatorId              String?  @db.Uuid
  name                   String
  description            String?
  isPublic               Boolean  @default(false)
  isArchived             Boolean  @default(false)
  originExerciseId       String?  @db.Uuid
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Optional binding to a VocabularyDeck
  boundVocabularyDeckId  String?  @db.Uuid

  creator                Teacher?         @relation("TeacherCreatedFillInTheBlankDecks", fields: [creatorId], references: [id], onDelete: SetNull)
  boundVocabularyDeck    VocabularyDeck?  @relation("BoundFillInTheBlankDecks", fields: [boundVocabularyDeckId], references: [id], onDelete: SetNull)
  cards                  FillInTheBlankCard[]
  unitItem               UnitItem?
}

model FillInTheBlankCard {
  id                      String   @id @default(uuid()) @db.Uuid
  deckId                  String   @db.Uuid
  question                String   // e.g., "I ___ to the store yesterday."
  answer                  String   // e.g., "went"
  options                 Json?    // For multiple choice, e.g., ["go", "went", "gone"]
  explanation             String?  // Optional explanation shown after revealing the answer
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Optional binding to a specific VocabularyCard
  boundVocabularyCardId   String?  @db.Uuid

  deck                    FillInTheBlankDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)
  boundVocabularyCard     VocabularyCard?    @relation(fields: [boundVocabularyCardId], references: [id], onDelete: SetNull)
  studentDoneRecords      StudentFillInTheBlankCardDone[]

  @@index([deckId])
}

model StudentFillInTheBlankCardDone {
  studentId String @db.Uuid
  cardId    String @db.Uuid
  completedAt DateTime @default(now())

  student Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  card    FillInTheBlankCard @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([studentId, cardId]) // Composite primary key ensures one record per student-card pair
}


model StudentDeck {
  id           String   @id @default(uuid()) @db.Uuid
  studentId    String   @db.Uuid
  deckId       String   @db.Uuid
  dailyNewCards      Int      @default(10)
  dailyReviewLimit   Int      @default(50)
  assignedAt   DateTime @default(now())
  completedAt  DateTime?
  isActive     Boolean  @default(true)

  student Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  deck    VocabularyDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@unique([studentId, deckId])
}

model StudentCardState {
  id                    String    @id @default(uuid()) @db.Uuid
  studentId             String    @db.Uuid
  cardId                String    @db.Uuid
  stability             Float
  difficulty            Float
  due                   DateTime
  lastReview            DateTime?
  reps                  Int       @default(0)
  lapses                Int       @default(0)
  state                 CardState @default(NEW)
  averageResponseTimeMs Int       @default(0)
  consecutiveCorrect    Int       @default(0)
  retrievability        Float?
  intervalDays          Int?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  student Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  card    VocabularyCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  @@unique([studentId, cardId])
}

model ReviewHistory {
  id                 BigInt     @id @default(autoincrement())
  studentId          String     @db.Uuid
  cardId             String     @db.Uuid
  sessionId          String?    @db.Uuid
  reviewType         ReviewType
  rating             Int
  responseTimeMs     Int?
  previousStability  Float?
  previousDifficulty Float?
  previousDue        DateTime?
  previousState      CardState?
  isLearningStep     Boolean    @default(false)
  reviewedAt         DateTime   @default(now())

  student Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([studentId, cardId])
  @@index([studentId, cardId, isLearningStep])
  @@index([reviewedAt])
  @@index([sessionId])
}

model StudentFsrsParams {
  id                String   @id @default(uuid()) @db.Uuid
  studentId         String   @db.Uuid
  w                 Json
  version           Int      @default(1)
  optimizationScore Float?
  trainingDataSize  Int?
  lastOptimized     DateTime @default(now())
  isActive          Boolean  @default(true)

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, isActive])
}

model ListeningCardState {
  id                    String    @id @default(uuid()) @db.Uuid
  studentId             String    @db.Uuid
  cardId                String    @db.Uuid
  stability             Float
  difficulty            Float
  due                   DateTime
  lastReview            DateTime?
  reps                  Int       @default(0)
  lapses                Int       @default(0)
  state                 CardState @default(NEW)
  averageResponseTimeMs Int       @default(0)
  consecutiveCorrect    Int       @default(0)
  retrievability        Float?
  intervalDays          Int?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  student Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  card    VocabularyCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, cardId])
  @@index([studentId, due])
  @@index([studentId, state])
}

model ListeningFsrsParams {
  id                String   @id @default(uuid()) @db.Uuid
  studentId         String   @db.Uuid
  w                 Json
  version           Int      @default(1)
  optimizationScore Float?
  trainingDataSize  Int?
  lastOptimized     DateTime @default(now())
  isActive          Boolean  @default(true)

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId, isActive])
}

model Payment {
  id               String        @id @default(uuid()) @db.Uuid
  studentId        String        @db.Uuid
  amount           Decimal       @db.Decimal(10, 2)
  classesPurchased Int
  classesUsed      Int           @default(0)
  paymentDate      DateTime      @db.Date
  status           PaymentStatus @default(ACTIVE)
  notes            String?

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model ClassSchedule {
  id            String      @id @default(uuid()) @db.Uuid
  studentId     String      @db.Uuid
  scheduledTime DateTime
  status        ClassStatus @default(SCHEDULED)
  duration      Int?
  notes         String?

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// ================================================================= //
// AUTH SESSIONS
// ================================================================= //

model AuthSession {
  id         String   @id @default(uuid()) @db.Uuid
  teacherId  String   @db.Uuid
  tokenHash  String   @unique
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  expiresAt  DateTime
  userAgent  String?
  ip         String?

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId, expiresAt])
}
